{"version":3,"sources":["file:///Users/haothanhit/Desktop/ThanSoHocV2/Numerology36/assets/common/AudioManager.ts"],"names":["AudioManager","assert","log","sys","SOUND","MUSIC","init","audioSource","_audioSource","playMusic","play","isMusicOn","playing","checkPlayMusic","getMusic","pauseMusic","pause","playSoundClick","getSound","playSound","setMusic","state","localStorage","setItem","sound","getItem","setSound","name"],"mappings":";;;oFAKaA,Y;;;;;;;;;AALJC,MAAAA,M,OAAAA,M;AAA8CC,MAAAA,G,OAAAA,G;AAAKC,MAAAA,G,OAAAA,G;;;;;;;;;AAEtDC,MAAAA,K,GAAQ,O;AACRC,MAAAA,K,GAAQ,O;;8BAEDL,Y,GAAN,MAAMA,YAAN,CAAmB;AAExB;AAEA;AACkB,eAAJM,IAAI,CAACC,WAAD,EAA2B;AAC3CL,UAAAA,GAAG,CAAC,qBAAD,CAAH;AACAF,UAAAA,YAAY,CAACQ,YAAb,GAA4BD,WAA5B;AACD,SARuB,CAUvB;AACD;AACA;AACA;AACA;;;AAEuB,eAATE,SAAS,GAAG;AACxB,cAAMF,WAAW,GAAGP,YAAY,CAACQ,YAAjC;AACAP,UAAAA,MAAM,CAACM,WAAD,EAAc,0BAAd,CAAN;AAEAA,UAAAA,WAAW,CAACG,IAAZ;AACD;;AAEsB,eAATC,SAAS,GAAY;AACjC,iBAAOX,YAAY,CAACQ,YAAb,CAA0BI,OAAjC;AACD;;AAE2B,eAAdC,cAAc,GAAG;AAC7B,cAAI,KAAKC,QAAL,OAAoB,MAApB,IAA8B,CAAC,KAAKH,SAAL,EAAnC,EAAqD;AACnD,iBAAKF,SAAL;AACD;AACF;;AAEuB,eAAVM,UAAU,GAAG;AACzB,cAAMR,WAAW,GAAGP,YAAY,CAACQ,YAAjC;AACAP,UAAAA,MAAM,CAACM,WAAD,EAAc,0BAAd,CAAN;AAEAA,UAAAA,WAAW,CAACS,KAAZ;AACD;;AAE2B,eAAdC,cAAc,GAAG;AAC7B,cAAI,KAAKC,QAAL,OAAoB,MAAxB,EAAgC;AAC9B,iBAAKC,SAAL,CAAe,OAAf;AACD;AACF;;AAEqB,eAARC,QAAQ,CAACC,KAAD,EAAgB;AACpClB,UAAAA,GAAG,CAACmB,YAAJ,CAAiBC,OAAjB,CAAyBlB,KAAzB,EAAgCgB,KAAhC;AACD;;AAEqB,eAARP,QAAQ,GAAW;AAC/B,cAAIU,KAAU,GAAGrB,GAAG,CAACmB,YAAJ,CAAiBG,OAAjB,CAAyBpB,KAAzB,CAAjB;AACA,iBAAOmB,KAAP,WAAOA,KAAP,GAAgB,MAAhB;AACD;;AAEqB,eAARE,QAAQ,CAACL,KAAD,EAAgB;AACpClB,UAAAA,GAAG,CAACmB,YAAJ,CAAiBC,OAAjB,CAAyBnB,KAAzB,EAAgCiB,KAAhC;AACD;;AAEqB,eAARH,QAAQ,GAAW;AAC/B,cAAIM,KAAU,GAAGrB,GAAG,CAACmB,YAAJ,CAAiBG,OAAjB,CAAyBrB,KAAzB,CAAjB;AACA,iBAAOoB,KAAP,WAAOA,KAAP,GAAgB,MAAhB;AACD;;AAEsB,eAATL,SAAS,CAACQ,IAAD,EAAe,CAEpC;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACD;;AA1FuB,O;;AAAb3B,MAAAA,Y,CACIQ,Y","sourcesContent":["import { assert, assetManager, AudioClip, AudioSource, log, sys } from \"cc\";\n\nconst SOUND = \"SOUND\";\nconst MUSIC = \"MUSIC\";\n\nexport class AudioManager {\n  private static _audioSource?: AudioSource;\n  //private static _audioSourceSound?: AudioSource;\n\n  // init AudioManager in GameRoot component.\n  public static init(audioSource: AudioSource) {\n    log(\"Init AudioManager !\");\n    AudioManager._audioSource = audioSource;\n  }\n\n   // init Sound in GameRoot component.\n  //  public static initSound(audioSource: AudioSource) {\n  //   log(\"Init SoundManager !\");\n  //   AudioManager._audioSourceSound = audioSource;\n  // }\n\n  public static playMusic() {\n    const audioSource = AudioManager._audioSource!;\n    assert(audioSource, \"AudioManager not inited!\");\n\n    audioSource.play();\n  }\n\n  public static isMusicOn(): boolean {\n    return AudioManager._audioSource.playing;\n  }\n\n  public static checkPlayMusic() {\n    if (this.getMusic() === \"true\" && !this.isMusicOn()) {\n      this.playMusic();\n    }\n  }\n\n  public static pauseMusic() {\n    const audioSource = AudioManager._audioSource!;\n    assert(audioSource, \"AudioManager not inited!\");\n\n    audioSource.pause();\n  }\n\n  public static playSoundClick() {\n    if (this.getSound() === \"true\") {\n      this.playSound(\"click\");\n    }\n  }\n\n  public static setMusic(state: string) {\n    sys.localStorage.setItem(MUSIC, state);\n  }\n\n  public static getMusic(): string {\n    var sound: any = sys.localStorage.getItem(MUSIC);\n    return sound ?? \"true\";\n  }\n\n  public static setSound(state: string) {\n    sys.localStorage.setItem(SOUND, state);\n  }\n\n  public static getSound(): string {\n    var sound: any = sys.localStorage.getItem(SOUND);\n    return sound ?? \"true\";\n  }\n\n  public static playSound(name: string) {\n\n    // const audioSourceSound = AudioManager._audioSourceSound!;\n    // assert(audioSourceSound, \"SoundManager not inited!\");\n    // audioSourceSound.loop=false\n    // audioSourceSound.play();\n\n\n    // const audioSource = AudioManager._audioSource!;\n    // assert(audioSource, \"AudioManager not inited!\");\n\n    // const path = `sound/${name}`;\n    // let cachedAudioClip = AudioManager._cachedAudioClipMap[path];\n    // if (cachedAudioClip) {\n    //   audioSource.playOneShot(cachedAudioClip, 1);\n    // } else {\n    //   assetManager.resources?.load(path, AudioClip, (err, clip) => {\n    //     if (err) {\n    //       console.warn(err);\n    //       return;\n    //     }\n\n    //     AudioManager._cachedAudioClipMap[path] = clip;\n    //     audioSource.playOneShot(clip, 1);\n    //   });\n    // }\n  }\n}\n"]}