{"version":3,"sources":["file:///Users/haothanhit/Desktop/ThanSoHocV2/Numerology36/assets/script/Profile.ts"],"names":["_decorator","Component","EventHandler","ToggleContainerComponent","AudioManager","ccclass","property","Profile","ToggleComponent","onLoad","containerEventHandler","target","node","component","handler","customEventData","container","getComponent","checkEvents","push","callback","event","exitScreen","isMusicOn","pauseMusic","playMusic","playSound","start","update","deltaTime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAA+EC,MAAAA,Y,OAAAA,Y;AAAcC,MAAAA,wB,OAAAA,wB;;AAKzGC,MAAAA,Y,iBAAAA,Y;;;;;;;;;OAJH;AAACC,QAAAA,OAAD;AAAUC,QAAAA;AAAV,O,GAAsBN,U;;yBAOPO,O,WADpBF,OAAO,CAAC,SAAD,C,UAGHC,QAAQ,CAACE,eAAD,C,UAGRF,QAAQ,CAACE,eAAD,C,2BANb,MACqBD,OADrB,SACqCN,SADrC,CAC+C;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAW7CQ,QAAAA,MAAM,GAAG;AAEP,cAAMC,qBAAqB,GAAG,IAAIR,YAAJ,EAA9B,CAFO,CAGP;;AACAQ,UAAAA,qBAAqB,CAACC,MAAtB,GAA+B,KAAKC,IAApC,CAJO,CAKP;;AACAF,UAAAA,qBAAqB,CAACG,SAAtB,GAAkC,SAAlC;AACAH,UAAAA,qBAAqB,CAACI,OAAtB,GAAgC,UAAhC;AACAJ,UAAAA,qBAAqB,CAACK,eAAtB,GAAwC,QAAxC;AACA,cAAMC,SAAS,GAAG,KAAKJ,IAAL,CAAUK,YAAV,CAAuBd,wBAAvB,CAAlB;AACAa,UAAAA,SAAS,CAACE,WAAV,CAAsBC,IAAtB,CAA2BT,qBAA3B;AAED;;AAEDU,QAAAA,QAAQ,CAACC,KAAD,EAAeN,eAAf,EAAuC,CAC7C;AACA;AAGH;;AAGEO,QAAAA,UAAU,GAAE;AAEX,cAAG;AAAA;AAAA,4CAAaC,SAAb,EAAH,EAA4B;AAC1B;AAAA;AAAA,8CAAaC,UAAb;AAGH,WAJC,MAIG;AACH;AAAA;AAAA,8CAAaC,SAAb;AACA;AAAA;AAAA,8CAAaC,SAAb,CAAuB,OAAvB;AAED;AAEC;;AAEFC,QAAAA,KAAK,GAAG,CAIN;AACA;AAED;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAE3B;;AA1D8C,O;;;;;iBAGjB,I;;;;;;;iBAGE,I","sourcesContent":["import { _decorator, Component,assert,AudioSource, Node, Label, EditBox,sys, director, Button,game, EventHandler, ToggleContainerComponent } from 'cc';\nconst {ccclass, property} = _decorator;\n\n\n\nimport { AudioManager } from \"../common/AudioManager\";\n\n@ccclass('Profile')\nexport default class Profile extends Component {\n\n    @property(ToggleComponent)\n    rdMale: ToggleComponent = null;\n  \n    @property(ToggleComponent)\n    rdFemale: ToggleComponent = null;\n\n\n \n\n  onLoad() {\n\n    const containerEventHandler = new EventHandler();\n    // This Node is the node to which your event processing code component belongs\n    containerEventHandler.target = this.node;\n    // This is the script class name\n    containerEventHandler.component = 'example';\n    containerEventHandler.handler = 'callback';\n    containerEventHandler.customEventData = 'foobar';\n    const container = this.node.getComponent(ToggleContainerComponent);\n    container.checkEvents.push(containerEventHandler);\n\n  }\n\n  callback(event: Event, customEventData: string){\n    // The event here is a Touch Event object, and you can get the send node of the event by event.target\n    // The customEventData parameter here is equal to the \"foobar\" you set before\n\n   \n}\n\n   \n   exitScreen(){\n\n    if(AudioManager.isMusicOn()){\n      AudioManager.pauseMusic()\n    \n      \n  }else{\n    AudioManager.playMusic();\n    AudioManager.playSound(\"click\");      \n\n  }\n\n   }\n  \n  start() {\n\n\n\n    // AudioManager.setStateMusic(\"1\");\n    //          AudioManager.checkPlayMusic();\n\n  }\n\n  update(deltaTime: number) {\n        \n}\n\n\n}\n\n"]}